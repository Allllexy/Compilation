/*
 * generated by Xtext 2.10.0
 */
package org.xtext.ide.contentassist.antlr;

import com.google.inject.Inject;
import java.util.Collection;
import java.util.HashMap;
import java.util.Map;
import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.xtext.ide.contentassist.antlr.internal.InternalCompilationParser;
import org.xtext.services.CompilationGrammarAccess;

public class CompilationParser extends AbstractContentAssistParser {

	@Inject
	private CompilationGrammarAccess grammarAccess;

	private Map<AbstractElement, String> nameMappings;

	@Override
	protected InternalCompilationParser createParser() {
		InternalCompilationParser result = new InternalCompilationParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getInputAccess().getAlternatives(), "rule__Input__Alternatives");
					put(grammarAccess.getOutputAccess().getAlternatives(), "rule__Output__Alternatives");
					put(grammarAccess.getCommandsAccess().getAlternatives(), "rule__Commands__Alternatives");
					put(grammarAccess.getCommandAccess().getAlternatives(), "rule__Command__Alternatives");
					put(grammarAccess.getCommandAccess().getAlternatives_4_8(), "rule__Command__Alternatives_4_8");
					put(grammarAccess.getExprAccess().getAlternatives(), "rule__Expr__Alternatives");
					put(grammarAccess.getExprAndAccess().getAlternatives(), "rule__ExprAnd__Alternatives");
					put(grammarAccess.getExprOrAccess().getAlternatives(), "rule__ExprOr__Alternatives");
					put(grammarAccess.getExprNotAccess().getAlternatives(), "rule__ExprNot__Alternatives");
					put(grammarAccess.getExprEqAccess().getAlternatives(), "rule__ExprEq__Alternatives");
					put(grammarAccess.getExprsAccess().getAlternatives(), "rule__Exprs__Alternatives");
					put(grammarAccess.getExprSimpleAccess().getAlternatives(), "rule__ExprSimple__Alternatives");
					put(grammarAccess.getLexprAccess().getAlternatives(), "rule__Lexpr__Alternatives");
					put(grammarAccess.getVarsAccess().getAlternatives(), "rule__Vars__Alternatives");
					put(grammarAccess.getProgramAccess().getGroup(), "rule__Program__Group__0");
					put(grammarAccess.getFunctionAccess().getGroup(), "rule__Function__Group__0");
					put(grammarAccess.getDefinitionAccess().getGroup(), "rule__Definition__Group__0");
					put(grammarAccess.getInputAccess().getGroup_0(), "rule__Input__Group_0__0");
					put(grammarAccess.getOutputAccess().getGroup_0(), "rule__Output__Group_0__0");
					put(grammarAccess.getCommandsAccess().getGroup_0(), "rule__Commands__Group_0__0");
					put(grammarAccess.getCommandsAccess().getGroup_0_0(), "rule__Commands__Group_0_0__0");
					put(grammarAccess.getCommandAccess().getGroup_1(), "rule__Command__Group_1__0");
					put(grammarAccess.getCommandAccess().getGroup_2(), "rule__Command__Group_2__0");
					put(grammarAccess.getCommandAccess().getGroup_3(), "rule__Command__Group_3__0");
					put(grammarAccess.getCommandAccess().getGroup_4(), "rule__Command__Group_4__0");
					put(grammarAccess.getCommandAccess().getGroup_4_8_1(), "rule__Command__Group_4_8_1__0");
					put(grammarAccess.getCommandAccess().getGroup_5(), "rule__Command__Group_5__0");
					put(grammarAccess.getExprAndAccess().getGroup_0(), "rule__ExprAnd__Group_0__0");
					put(grammarAccess.getExprAndAccess().getGroup_0_0(), "rule__ExprAnd__Group_0_0__0");
					put(grammarAccess.getExprOrAccess().getGroup_0(), "rule__ExprOr__Group_0__0");
					put(grammarAccess.getExprOrAccess().getGroup_0_0(), "rule__ExprOr__Group_0_0__0");
					put(grammarAccess.getExprNotAccess().getGroup_0(), "rule__ExprNot__Group_0__0");
					put(grammarAccess.getExprEqAccess().getGroup_0(), "rule__ExprEq__Group_0__0");
					put(grammarAccess.getExprEqAccess().getGroup_1(), "rule__ExprEq__Group_1__0");
					put(grammarAccess.getExprsAccess().getGroup_0(), "rule__Exprs__Group_0__0");
					put(grammarAccess.getExprsAccess().getGroup_0_0(), "rule__Exprs__Group_0_0__0");
					put(grammarAccess.getExprSimpleAccess().getGroup_3(), "rule__ExprSimple__Group_3__0");
					put(grammarAccess.getExprSimpleAccess().getGroup_4(), "rule__ExprSimple__Group_4__0");
					put(grammarAccess.getExprSimpleAccess().getGroup_5(), "rule__ExprSimple__Group_5__0");
					put(grammarAccess.getExprSimpleAccess().getGroup_6(), "rule__ExprSimple__Group_6__0");
					put(grammarAccess.getExprSimpleAccess().getGroup_7(), "rule__ExprSimple__Group_7__0");
					put(grammarAccess.getLexprAccess().getGroup_0(), "rule__Lexpr__Group_0__0");
					put(grammarAccess.getLexprAccess().getGroup_1(), "rule__Lexpr__Group_1__0");
					put(grammarAccess.getVarsAccess().getGroup_0(), "rule__Vars__Group_0__0");
					put(grammarAccess.getModelAccess().getWhileAssignment(), "rule__Model__WhileAssignment");
				}
			};
		}
		return nameMappings.get(element);
	}

	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			InternalCompilationParser typedParser = (InternalCompilationParser) parser;
			typedParser.entryRuleModel();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public CompilationGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(CompilationGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
