/*
 * generated by Xtext 2.10.0
 */
package org.xtext.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class CompilationGrammarAccess extends AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Compilation.Model");
		private final Assignment cWhileAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cWhileProgramParserRuleCall_0 = (RuleCall)cWhileAssignment.eContents().get(0);
		
		//Model:
		//	While+=Program;
		@Override public ParserRule getRule() { return rule; }
		
		//While+=Program
		public Assignment getWhileAssignment() { return cWhileAssignment; }
		
		//Program
		public RuleCall getWhileProgramParserRuleCall_0() { return cWhileProgramParserRuleCall_0; }
	}
	public class ProgramElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Compilation.Program");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cFunctionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cSEPTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		/// * --- Head of program --- * / Program:
		//	(Function SEP)*;
		@Override public ParserRule getRule() { return rule; }
		
		//(Function SEP)*
		public Group getGroup() { return cGroup; }
		
		//Function
		public RuleCall getFunctionParserRuleCall_0() { return cFunctionParserRuleCall_0; }
		
		//SEP
		public RuleCall getSEPTerminalRuleCall_1() { return cSEPTerminalRuleCall_1; }
	}
	public class FunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Compilation.Function");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFunctionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cSEPTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cSYMBOLTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Keyword cColonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final RuleCall cSEPTerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		private final RuleCall cDefinitionParserRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		
		//Function:
		//	'function' SEP SYMBOL ':' SEP Definition;
		@Override public ParserRule getRule() { return rule; }
		
		//'function' SEP SYMBOL ':' SEP Definition
		public Group getGroup() { return cGroup; }
		
		//'function'
		public Keyword getFunctionKeyword_0() { return cFunctionKeyword_0; }
		
		//SEP
		public RuleCall getSEPTerminalRuleCall_1() { return cSEPTerminalRuleCall_1; }
		
		//SYMBOL
		public RuleCall getSYMBOLTerminalRuleCall_2() { return cSYMBOLTerminalRuleCall_2; }
		
		//':'
		public Keyword getColonKeyword_3() { return cColonKeyword_3; }
		
		//SEP
		public RuleCall getSEPTerminalRuleCall_4() { return cSEPTerminalRuleCall_4; }
		
		//Definition
		public RuleCall getDefinitionParserRuleCall_5() { return cDefinitionParserRuleCall_5; }
	}
	public class DefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Compilation.Definition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cReadKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cSEPTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cInputParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Keyword cPercentSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final RuleCall cCommandsParserRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		private final Keyword cPercentSignKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cWriteKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final RuleCall cSEPTerminalRuleCall_7 = (RuleCall)cGroup.eContents().get(7);
		private final RuleCall cOutputParserRuleCall_8 = (RuleCall)cGroup.eContents().get(8);
		
		////Global form of a WHILE program	
		//Definition:
		//	'read' SEP Input '%' Commands '%' 'write' SEP Output;
		@Override public ParserRule getRule() { return rule; }
		
		//'read' SEP Input '%' Commands '%' 'write' SEP Output
		public Group getGroup() { return cGroup; }
		
		//'read'
		public Keyword getReadKeyword_0() { return cReadKeyword_0; }
		
		//SEP
		public RuleCall getSEPTerminalRuleCall_1() { return cSEPTerminalRuleCall_1; }
		
		//Input
		public RuleCall getInputParserRuleCall_2() { return cInputParserRuleCall_2; }
		
		//'%'
		public Keyword getPercentSignKeyword_3() { return cPercentSignKeyword_3; }
		
		//Commands
		public RuleCall getCommandsParserRuleCall_4() { return cCommandsParserRuleCall_4; }
		
		//'%'
		public Keyword getPercentSignKeyword_5() { return cPercentSignKeyword_5; }
		
		//'write'
		public Keyword getWriteKeyword_6() { return cWriteKeyword_6; }
		
		//SEP
		public RuleCall getSEPTerminalRuleCall_7() { return cSEPTerminalRuleCall_7; }
		
		//Output
		public RuleCall getOutputParserRuleCall_8() { return cOutputParserRuleCall_8; }
	}
	public class InputElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Compilation.Input");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final RuleCall cVARIABLETerminalRuleCall_0_0 = (RuleCall)cGroup_0.eContents().get(0);
		private final Keyword cCommaKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final RuleCall cInputParserRuleCall_0_2 = (RuleCall)cGroup_0.eContents().get(2);
		private final RuleCall cVARIABLETerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Input:
		//	VARIABLE ',' Input | VARIABLE;
		@Override public ParserRule getRule() { return rule; }
		
		//VARIABLE ',' Input | VARIABLE
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//VARIABLE ',' Input
		public Group getGroup_0() { return cGroup_0; }
		
		//VARIABLE
		public RuleCall getVARIABLETerminalRuleCall_0_0() { return cVARIABLETerminalRuleCall_0_0; }
		
		//','
		public Keyword getCommaKeyword_0_1() { return cCommaKeyword_0_1; }
		
		//Input
		public RuleCall getInputParserRuleCall_0_2() { return cInputParserRuleCall_0_2; }
		
		//VARIABLE
		public RuleCall getVARIABLETerminalRuleCall_1() { return cVARIABLETerminalRuleCall_1; }
	}
	public class OutputElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Compilation.Output");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final RuleCall cVARIABLETerminalRuleCall_0_0 = (RuleCall)cGroup_0.eContents().get(0);
		private final Keyword cCommaKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final RuleCall cOutputParserRuleCall_0_2 = (RuleCall)cGroup_0.eContents().get(2);
		private final RuleCall cVARIABLETerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Output:
		//	VARIABLE ',' Output | VARIABLE;
		@Override public ParserRule getRule() { return rule; }
		
		//VARIABLE ',' Output | VARIABLE
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//VARIABLE ',' Output
		public Group getGroup_0() { return cGroup_0; }
		
		//VARIABLE
		public RuleCall getVARIABLETerminalRuleCall_0_0() { return cVARIABLETerminalRuleCall_0_0; }
		
		//','
		public Keyword getCommaKeyword_0_1() { return cCommaKeyword_0_1; }
		
		//Output
		public RuleCall getOutputParserRuleCall_0_2() { return cOutputParserRuleCall_0_2; }
		
		//VARIABLE
		public RuleCall getVARIABLETerminalRuleCall_1() { return cVARIABLETerminalRuleCall_1; }
	}
	public class CommandsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Compilation.Commands");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Group cGroup_0_0 = (Group)cGroup_0.eContents().get(0);
		private final RuleCall cCommandParserRuleCall_0_0_0 = (RuleCall)cGroup_0_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_0_0_1 = (Keyword)cGroup_0_0.eContents().get(1);
		private final RuleCall cSEPTerminalRuleCall_0_0_2 = (RuleCall)cGroup_0_0.eContents().get(2);
		private final RuleCall cCommandsParserRuleCall_0_0_3 = (RuleCall)cGroup_0_0.eContents().get(3);
		private final RuleCall cCommandParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		/// * --- Body of program --- * / Commands:
		//	=> (Command ';' SEP Commands) | Command;
		@Override public ParserRule getRule() { return rule; }
		
		//=> (Command ';' SEP Commands) | Command
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//=> (Command ';' SEP Commands)
		public Group getGroup_0() { return cGroup_0; }
		
		//(Command ';' SEP Commands)
		public Group getGroup_0_0() { return cGroup_0_0; }
		
		//Command
		public RuleCall getCommandParserRuleCall_0_0_0() { return cCommandParserRuleCall_0_0_0; }
		
		//';'
		public Keyword getSemicolonKeyword_0_0_1() { return cSemicolonKeyword_0_0_1; }
		
		//SEP
		public RuleCall getSEPTerminalRuleCall_0_0_2() { return cSEPTerminalRuleCall_0_0_2; }
		
		//Commands
		public RuleCall getCommandsParserRuleCall_0_0_3() { return cCommandsParserRuleCall_0_0_3; }
		
		//Command
		public RuleCall getCommandParserRuleCall_1() { return cCommandParserRuleCall_1; }
	}
	public class CommandElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Compilation.Command");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cNopKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final RuleCall cVarsParserRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Keyword cColonEqualsSignKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final RuleCall cExprsParserRuleCall_1_2 = (RuleCall)cGroup_1.eContents().get(2);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Keyword cWhileKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final RuleCall cSEPTerminalRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		private final RuleCall cExprParserRuleCall_2_2 = (RuleCall)cGroup_2.eContents().get(2);
		private final RuleCall cSEPTerminalRuleCall_2_3 = (RuleCall)cGroup_2.eContents().get(3);
		private final Keyword cDoKeyword_2_4 = (Keyword)cGroup_2.eContents().get(4);
		private final RuleCall cSEPTerminalRuleCall_2_5 = (RuleCall)cGroup_2.eContents().get(5);
		private final RuleCall cCommandsParserRuleCall_2_6 = (RuleCall)cGroup_2.eContents().get(6);
		private final RuleCall cSEPTerminalRuleCall_2_7 = (RuleCall)cGroup_2.eContents().get(7);
		private final Keyword cOdKeyword_2_8 = (Keyword)cGroup_2.eContents().get(8);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Keyword cForKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final RuleCall cSEPTerminalRuleCall_3_1 = (RuleCall)cGroup_3.eContents().get(1);
		private final RuleCall cExprParserRuleCall_3_2 = (RuleCall)cGroup_3.eContents().get(2);
		private final RuleCall cSEPTerminalRuleCall_3_3 = (RuleCall)cGroup_3.eContents().get(3);
		private final Keyword cDoKeyword_3_4 = (Keyword)cGroup_3.eContents().get(4);
		private final RuleCall cSEPTerminalRuleCall_3_5 = (RuleCall)cGroup_3.eContents().get(5);
		private final RuleCall cCommandsParserRuleCall_3_6 = (RuleCall)cGroup_3.eContents().get(6);
		private final RuleCall cSEPTerminalRuleCall_3_7 = (RuleCall)cGroup_3.eContents().get(7);
		private final Keyword cOdKeyword_3_8 = (Keyword)cGroup_3.eContents().get(8);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Keyword cIfKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final RuleCall cSEPTerminalRuleCall_4_1 = (RuleCall)cGroup_4.eContents().get(1);
		private final RuleCall cExprParserRuleCall_4_2 = (RuleCall)cGroup_4.eContents().get(2);
		private final RuleCall cSEPTerminalRuleCall_4_3 = (RuleCall)cGroup_4.eContents().get(3);
		private final Keyword cThenKeyword_4_4 = (Keyword)cGroup_4.eContents().get(4);
		private final RuleCall cSEPTerminalRuleCall_4_5 = (RuleCall)cGroup_4.eContents().get(5);
		private final RuleCall cCommandsParserRuleCall_4_6 = (RuleCall)cGroup_4.eContents().get(6);
		private final RuleCall cSEPTerminalRuleCall_4_7 = (RuleCall)cGroup_4.eContents().get(7);
		private final Alternatives cAlternatives_4_8 = (Alternatives)cGroup_4.eContents().get(8);
		private final Keyword cFiKeyword_4_8_0 = (Keyword)cAlternatives_4_8.eContents().get(0);
		private final Group cGroup_4_8_1 = (Group)cAlternatives_4_8.eContents().get(1);
		private final Keyword cElseKeyword_4_8_1_0 = (Keyword)cGroup_4_8_1.eContents().get(0);
		private final RuleCall cSEPTerminalRuleCall_4_8_1_1 = (RuleCall)cGroup_4_8_1.eContents().get(1);
		private final RuleCall cCommandsParserRuleCall_4_8_1_2 = (RuleCall)cGroup_4_8_1.eContents().get(2);
		private final RuleCall cSEPTerminalRuleCall_4_8_1_3 = (RuleCall)cGroup_4_8_1.eContents().get(3);
		private final Keyword cFiKeyword_4_8_1_4 = (Keyword)cGroup_4_8_1.eContents().get(4);
		private final Group cGroup_5 = (Group)cAlternatives.eContents().get(5);
		private final Keyword cForeachKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final RuleCall cSEPTerminalRuleCall_5_1 = (RuleCall)cGroup_5.eContents().get(1);
		private final RuleCall cExprParserRuleCall_5_2 = (RuleCall)cGroup_5.eContents().get(2);
		private final RuleCall cSEPTerminalRuleCall_5_3 = (RuleCall)cGroup_5.eContents().get(3);
		private final Keyword cInKeyword_5_4 = (Keyword)cGroup_5.eContents().get(4);
		private final RuleCall cSEPTerminalRuleCall_5_5 = (RuleCall)cGroup_5.eContents().get(5);
		private final RuleCall cExprParserRuleCall_5_6 = (RuleCall)cGroup_5.eContents().get(6);
		private final RuleCall cSEPTerminalRuleCall_5_7 = (RuleCall)cGroup_5.eContents().get(7);
		private final Keyword cDoKeyword_5_8 = (Keyword)cGroup_5.eContents().get(8);
		private final RuleCall cSEPTerminalRuleCall_5_9 = (RuleCall)cGroup_5.eContents().get(9);
		private final RuleCall cCommandsParserRuleCall_5_10 = (RuleCall)cGroup_5.eContents().get(10);
		private final RuleCall cSEPTerminalRuleCall_5_11 = (RuleCall)cGroup_5.eContents().get(11);
		private final Keyword cOdKeyword_5_12 = (Keyword)cGroup_5.eContents().get(12);
		
		//Command:
		//	'nop' | Vars ':=' Exprs | 'while' SEP Expr SEP 'do' SEP Commands SEP 'od' | 'for' SEP Expr SEP 'do' SEP Commands SEP
		//	'od' | 'if' SEP Expr SEP 'then' SEP Commands SEP ('fi' | 'else' SEP Commands SEP 'fi') | 'foreach' SEP Expr SEP 'in'
		//	SEP Expr SEP 'do' SEP Commands SEP 'od';
		@Override public ParserRule getRule() { return rule; }
		
		//'nop' | Vars ':=' Exprs | 'while' SEP Expr SEP 'do' SEP Commands SEP 'od' | 'for' SEP Expr SEP 'do' SEP Commands SEP
		//'od' | 'if' SEP Expr SEP 'then' SEP Commands SEP ('fi' | 'else' SEP Commands SEP 'fi') | 'foreach' SEP Expr SEP 'in'
		//SEP Expr SEP 'do' SEP Commands SEP 'od'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'nop'
		public Keyword getNopKeyword_0() { return cNopKeyword_0; }
		
		//Vars ':=' Exprs
		public Group getGroup_1() { return cGroup_1; }
		
		//Vars
		public RuleCall getVarsParserRuleCall_1_0() { return cVarsParserRuleCall_1_0; }
		
		//':='
		public Keyword getColonEqualsSignKeyword_1_1() { return cColonEqualsSignKeyword_1_1; }
		
		//Exprs
		public RuleCall getExprsParserRuleCall_1_2() { return cExprsParserRuleCall_1_2; }
		
		//'while' SEP Expr SEP 'do' SEP Commands SEP 'od'
		public Group getGroup_2() { return cGroup_2; }
		
		//'while'
		public Keyword getWhileKeyword_2_0() { return cWhileKeyword_2_0; }
		
		//SEP
		public RuleCall getSEPTerminalRuleCall_2_1() { return cSEPTerminalRuleCall_2_1; }
		
		//Expr
		public RuleCall getExprParserRuleCall_2_2() { return cExprParserRuleCall_2_2; }
		
		//SEP
		public RuleCall getSEPTerminalRuleCall_2_3() { return cSEPTerminalRuleCall_2_3; }
		
		//'do'
		public Keyword getDoKeyword_2_4() { return cDoKeyword_2_4; }
		
		//SEP
		public RuleCall getSEPTerminalRuleCall_2_5() { return cSEPTerminalRuleCall_2_5; }
		
		//Commands
		public RuleCall getCommandsParserRuleCall_2_6() { return cCommandsParserRuleCall_2_6; }
		
		//SEP
		public RuleCall getSEPTerminalRuleCall_2_7() { return cSEPTerminalRuleCall_2_7; }
		
		//'od'
		public Keyword getOdKeyword_2_8() { return cOdKeyword_2_8; }
		
		//'for' SEP Expr SEP 'do' SEP Commands SEP 'od'
		public Group getGroup_3() { return cGroup_3; }
		
		//'for'
		public Keyword getForKeyword_3_0() { return cForKeyword_3_0; }
		
		//SEP
		public RuleCall getSEPTerminalRuleCall_3_1() { return cSEPTerminalRuleCall_3_1; }
		
		//Expr
		public RuleCall getExprParserRuleCall_3_2() { return cExprParserRuleCall_3_2; }
		
		//SEP
		public RuleCall getSEPTerminalRuleCall_3_3() { return cSEPTerminalRuleCall_3_3; }
		
		//'do'
		public Keyword getDoKeyword_3_4() { return cDoKeyword_3_4; }
		
		//SEP
		public RuleCall getSEPTerminalRuleCall_3_5() { return cSEPTerminalRuleCall_3_5; }
		
		//Commands
		public RuleCall getCommandsParserRuleCall_3_6() { return cCommandsParserRuleCall_3_6; }
		
		//SEP
		public RuleCall getSEPTerminalRuleCall_3_7() { return cSEPTerminalRuleCall_3_7; }
		
		//'od'
		public Keyword getOdKeyword_3_8() { return cOdKeyword_3_8; }
		
		//'if' SEP Expr SEP 'then' SEP Commands SEP ('fi' | 'else' SEP Commands SEP 'fi')
		public Group getGroup_4() { return cGroup_4; }
		
		//'if'
		public Keyword getIfKeyword_4_0() { return cIfKeyword_4_0; }
		
		//SEP
		public RuleCall getSEPTerminalRuleCall_4_1() { return cSEPTerminalRuleCall_4_1; }
		
		//Expr
		public RuleCall getExprParserRuleCall_4_2() { return cExprParserRuleCall_4_2; }
		
		//SEP
		public RuleCall getSEPTerminalRuleCall_4_3() { return cSEPTerminalRuleCall_4_3; }
		
		//'then'
		public Keyword getThenKeyword_4_4() { return cThenKeyword_4_4; }
		
		//SEP
		public RuleCall getSEPTerminalRuleCall_4_5() { return cSEPTerminalRuleCall_4_5; }
		
		//Commands
		public RuleCall getCommandsParserRuleCall_4_6() { return cCommandsParserRuleCall_4_6; }
		
		//SEP
		public RuleCall getSEPTerminalRuleCall_4_7() { return cSEPTerminalRuleCall_4_7; }
		
		//('fi' | 'else' SEP Commands SEP 'fi')
		public Alternatives getAlternatives_4_8() { return cAlternatives_4_8; }
		
		//'fi'
		public Keyword getFiKeyword_4_8_0() { return cFiKeyword_4_8_0; }
		
		//'else' SEP Commands SEP 'fi'
		public Group getGroup_4_8_1() { return cGroup_4_8_1; }
		
		//'else'
		public Keyword getElseKeyword_4_8_1_0() { return cElseKeyword_4_8_1_0; }
		
		//SEP
		public RuleCall getSEPTerminalRuleCall_4_8_1_1() { return cSEPTerminalRuleCall_4_8_1_1; }
		
		//Commands
		public RuleCall getCommandsParserRuleCall_4_8_1_2() { return cCommandsParserRuleCall_4_8_1_2; }
		
		//SEP
		public RuleCall getSEPTerminalRuleCall_4_8_1_3() { return cSEPTerminalRuleCall_4_8_1_3; }
		
		//'fi'
		public Keyword getFiKeyword_4_8_1_4() { return cFiKeyword_4_8_1_4; }
		
		//'foreach' SEP Expr SEP 'in' SEP Expr SEP 'do' SEP Commands SEP 'od'
		public Group getGroup_5() { return cGroup_5; }
		
		//'foreach'
		public Keyword getForeachKeyword_5_0() { return cForeachKeyword_5_0; }
		
		//SEP
		public RuleCall getSEPTerminalRuleCall_5_1() { return cSEPTerminalRuleCall_5_1; }
		
		//Expr
		public RuleCall getExprParserRuleCall_5_2() { return cExprParserRuleCall_5_2; }
		
		//SEP
		public RuleCall getSEPTerminalRuleCall_5_3() { return cSEPTerminalRuleCall_5_3; }
		
		//'in'
		public Keyword getInKeyword_5_4() { return cInKeyword_5_4; }
		
		//SEP
		public RuleCall getSEPTerminalRuleCall_5_5() { return cSEPTerminalRuleCall_5_5; }
		
		//Expr
		public RuleCall getExprParserRuleCall_5_6() { return cExprParserRuleCall_5_6; }
		
		//SEP
		public RuleCall getSEPTerminalRuleCall_5_7() { return cSEPTerminalRuleCall_5_7; }
		
		//'do'
		public Keyword getDoKeyword_5_8() { return cDoKeyword_5_8; }
		
		//SEP
		public RuleCall getSEPTerminalRuleCall_5_9() { return cSEPTerminalRuleCall_5_9; }
		
		//Commands
		public RuleCall getCommandsParserRuleCall_5_10() { return cCommandsParserRuleCall_5_10; }
		
		//SEP
		public RuleCall getSEPTerminalRuleCall_5_11() { return cSEPTerminalRuleCall_5_11; }
		
		//'od'
		public Keyword getOdKeyword_5_12() { return cOdKeyword_5_12; }
	}
	public class ExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Compilation.Expr");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cExprSimpleParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cExprAndParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Expr:
		//	=> ExprSimple | ExprAnd;
		@Override public ParserRule getRule() { return rule; }
		
		//=> ExprSimple | ExprAnd
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//=> ExprSimple
		public RuleCall getExprSimpleParserRuleCall_0() { return cExprSimpleParserRuleCall_0; }
		
		//ExprAnd
		public RuleCall getExprAndParserRuleCall_1() { return cExprAndParserRuleCall_1; }
	}
	public class ExprAndElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Compilation.ExprAnd");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Group cGroup_0_0 = (Group)cGroup_0.eContents().get(0);
		private final RuleCall cExprOrParserRuleCall_0_0_0 = (RuleCall)cGroup_0_0.eContents().get(0);
		private final RuleCall cSEPTerminalRuleCall_0_0_1 = (RuleCall)cGroup_0_0.eContents().get(1);
		private final Keyword cAmpersandAmpersandKeyword_0_0_2 = (Keyword)cGroup_0_0.eContents().get(2);
		private final RuleCall cSEPTerminalRuleCall_0_0_3 = (RuleCall)cGroup_0_0.eContents().get(3);
		private final RuleCall cExprAndParserRuleCall_0_0_4 = (RuleCall)cGroup_0_0.eContents().get(4);
		private final RuleCall cExprOrParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//// AND
		//ExprAnd:
		//	=> (ExprOr SEP '&&' SEP ExprAnd) | ExprOr;
		@Override public ParserRule getRule() { return rule; }
		
		//=> (ExprOr SEP '&&' SEP ExprAnd) | ExprOr
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//=> (ExprOr SEP '&&' SEP ExprAnd)
		public Group getGroup_0() { return cGroup_0; }
		
		//(ExprOr SEP '&&' SEP ExprAnd)
		public Group getGroup_0_0() { return cGroup_0_0; }
		
		//ExprOr
		public RuleCall getExprOrParserRuleCall_0_0_0() { return cExprOrParserRuleCall_0_0_0; }
		
		//SEP
		public RuleCall getSEPTerminalRuleCall_0_0_1() { return cSEPTerminalRuleCall_0_0_1; }
		
		//'&&'
		public Keyword getAmpersandAmpersandKeyword_0_0_2() { return cAmpersandAmpersandKeyword_0_0_2; }
		
		//SEP
		public RuleCall getSEPTerminalRuleCall_0_0_3() { return cSEPTerminalRuleCall_0_0_3; }
		
		//ExprAnd
		public RuleCall getExprAndParserRuleCall_0_0_4() { return cExprAndParserRuleCall_0_0_4; }
		
		//ExprOr
		public RuleCall getExprOrParserRuleCall_1() { return cExprOrParserRuleCall_1; }
	}
	public class ExprOrElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Compilation.ExprOr");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Group cGroup_0_0 = (Group)cGroup_0.eContents().get(0);
		private final RuleCall cExprNotParserRuleCall_0_0_0 = (RuleCall)cGroup_0_0.eContents().get(0);
		private final RuleCall cSEPTerminalRuleCall_0_0_1 = (RuleCall)cGroup_0_0.eContents().get(1);
		private final Keyword cVerticalLineVerticalLineKeyword_0_0_2 = (Keyword)cGroup_0_0.eContents().get(2);
		private final RuleCall cSEPTerminalRuleCall_0_0_3 = (RuleCall)cGroup_0_0.eContents().get(3);
		private final RuleCall cExprOrParserRuleCall_0_0_4 = (RuleCall)cGroup_0_0.eContents().get(4);
		private final RuleCall cExprNotParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//// OR
		//ExprOr:
		//	=> (ExprNot SEP '||' SEP ExprOr) | ExprNot;
		@Override public ParserRule getRule() { return rule; }
		
		//=> (ExprNot SEP '||' SEP ExprOr) | ExprNot
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//=> (ExprNot SEP '||' SEP ExprOr)
		public Group getGroup_0() { return cGroup_0; }
		
		//(ExprNot SEP '||' SEP ExprOr)
		public Group getGroup_0_0() { return cGroup_0_0; }
		
		//ExprNot
		public RuleCall getExprNotParserRuleCall_0_0_0() { return cExprNotParserRuleCall_0_0_0; }
		
		//SEP
		public RuleCall getSEPTerminalRuleCall_0_0_1() { return cSEPTerminalRuleCall_0_0_1; }
		
		//'||'
		public Keyword getVerticalLineVerticalLineKeyword_0_0_2() { return cVerticalLineVerticalLineKeyword_0_0_2; }
		
		//SEP
		public RuleCall getSEPTerminalRuleCall_0_0_3() { return cSEPTerminalRuleCall_0_0_3; }
		
		//ExprOr
		public RuleCall getExprOrParserRuleCall_0_0_4() { return cExprOrParserRuleCall_0_0_4; }
		
		//ExprNot
		public RuleCall getExprNotParserRuleCall_1() { return cExprNotParserRuleCall_1; }
	}
	public class ExprNotElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Compilation.ExprNot");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cExclamationMarkKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final RuleCall cSEPTerminalRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final RuleCall cExprEqParserRuleCall_0_2 = (RuleCall)cGroup_0.eContents().get(2);
		private final RuleCall cExprEqParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//// NOT
		//ExprNot:
		//	'!' SEP ExprEq | ExprEq;
		@Override public ParserRule getRule() { return rule; }
		
		//'!' SEP ExprEq | ExprEq
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'!' SEP ExprEq
		public Group getGroup_0() { return cGroup_0; }
		
		//'!'
		public Keyword getExclamationMarkKeyword_0_0() { return cExclamationMarkKeyword_0_0; }
		
		//SEP
		public RuleCall getSEPTerminalRuleCall_0_1() { return cSEPTerminalRuleCall_0_1; }
		
		//ExprEq
		public RuleCall getExprEqParserRuleCall_0_2() { return cExprEqParserRuleCall_0_2; }
		
		//ExprEq
		public RuleCall getExprEqParserRuleCall_1() { return cExprEqParserRuleCall_1; }
	}
	public class ExprEqElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Compilation.ExprEq");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final RuleCall cExprSimpleParserRuleCall_0_0 = (RuleCall)cGroup_0.eContents().get(0);
		private final Keyword cEqualsSignQuestionMarkKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final RuleCall cExprSimpleParserRuleCall_0_2 = (RuleCall)cGroup_0.eContents().get(2);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cExprParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		
		//// =?
		//ExprEq:
		//	ExprSimple '=?' ExprSimple | '(' Expr ')';
		@Override public ParserRule getRule() { return rule; }
		
		//ExprSimple '=?' ExprSimple | '(' Expr ')'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ExprSimple '=?' ExprSimple
		public Group getGroup_0() { return cGroup_0; }
		
		//ExprSimple
		public RuleCall getExprSimpleParserRuleCall_0_0() { return cExprSimpleParserRuleCall_0_0; }
		
		//'=?'
		public Keyword getEqualsSignQuestionMarkKeyword_0_1() { return cEqualsSignQuestionMarkKeyword_0_1; }
		
		//ExprSimple
		public RuleCall getExprSimpleParserRuleCall_0_2() { return cExprSimpleParserRuleCall_0_2; }
		
		//'(' Expr ')'
		public Group getGroup_1() { return cGroup_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_0() { return cLeftParenthesisKeyword_1_0; }
		
		//Expr
		public RuleCall getExprParserRuleCall_1_1() { return cExprParserRuleCall_1_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_2() { return cRightParenthesisKeyword_1_2; }
	}
	public class ExprsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Compilation.Exprs");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Group cGroup_0_0 = (Group)cGroup_0.eContents().get(0);
		private final RuleCall cExprParserRuleCall_0_0_0 = (RuleCall)cGroup_0_0.eContents().get(0);
		private final Keyword cCommaKeyword_0_0_1 = (Keyword)cGroup_0_0.eContents().get(1);
		private final RuleCall cExprsParserRuleCall_0_0_2 = (RuleCall)cGroup_0_0.eContents().get(2);
		private final RuleCall cExprParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Exprs:
		//	=> (Expr ',' Exprs) | Expr;
		@Override public ParserRule getRule() { return rule; }
		
		//=> (Expr ',' Exprs) | Expr
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//=> (Expr ',' Exprs)
		public Group getGroup_0() { return cGroup_0; }
		
		//(Expr ',' Exprs)
		public Group getGroup_0_0() { return cGroup_0_0; }
		
		//Expr
		public RuleCall getExprParserRuleCall_0_0_0() { return cExprParserRuleCall_0_0_0; }
		
		//','
		public Keyword getCommaKeyword_0_0_1() { return cCommaKeyword_0_0_1; }
		
		//Exprs
		public RuleCall getExprsParserRuleCall_0_0_2() { return cExprsParserRuleCall_0_0_2; }
		
		//Expr
		public RuleCall getExprParserRuleCall_1() { return cExprParserRuleCall_1; }
	}
	public class ExprSimpleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Compilation.ExprSimple");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cNilKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final RuleCall cVARIABLETerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cSYMBOLTerminalRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Keyword cLeftParenthesisKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Keyword cConsKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final RuleCall cLexprParserRuleCall_3_2 = (RuleCall)cGroup_3.eContents().get(2);
		private final Keyword cRightParenthesisKeyword_3_3 = (Keyword)cGroup_3.eContents().get(3);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Keyword cLeftParenthesisKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Keyword cListKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final RuleCall cLexprParserRuleCall_4_2 = (RuleCall)cGroup_4.eContents().get(2);
		private final Keyword cRightParenthesisKeyword_4_3 = (Keyword)cGroup_4.eContents().get(3);
		private final Group cGroup_5 = (Group)cAlternatives.eContents().get(5);
		private final Keyword cLeftParenthesisKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Keyword cHdKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final RuleCall cSEPTerminalRuleCall_5_2 = (RuleCall)cGroup_5.eContents().get(2);
		private final RuleCall cExprParserRuleCall_5_3 = (RuleCall)cGroup_5.eContents().get(3);
		private final Keyword cRightParenthesisKeyword_5_4 = (Keyword)cGroup_5.eContents().get(4);
		private final Group cGroup_6 = (Group)cAlternatives.eContents().get(6);
		private final Keyword cLeftParenthesisKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Keyword cTlKeyword_6_1 = (Keyword)cGroup_6.eContents().get(1);
		private final RuleCall cSEPTerminalRuleCall_6_2 = (RuleCall)cGroup_6.eContents().get(2);
		private final RuleCall cExprParserRuleCall_6_3 = (RuleCall)cGroup_6.eContents().get(3);
		private final Keyword cRightParenthesisKeyword_6_4 = (Keyword)cGroup_6.eContents().get(4);
		private final Group cGroup_7 = (Group)cAlternatives.eContents().get(7);
		private final Keyword cLeftParenthesisKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final RuleCall cSYMBOLTerminalRuleCall_7_1 = (RuleCall)cGroup_7.eContents().get(1);
		private final RuleCall cSEPTerminalRuleCall_7_2 = (RuleCall)cGroup_7.eContents().get(2);
		private final RuleCall cLexprParserRuleCall_7_3 = (RuleCall)cGroup_7.eContents().get(3);
		private final Keyword cRightParenthesisKeyword_7_4 = (Keyword)cGroup_7.eContents().get(4);
		
		//ExprSimple:
		//	'nil' | VARIABLE | SYMBOL |
		//	'(' 'cons' Lexpr ')' | '(' 'list' Lexpr ')' |
		//	'(' 'hd' SEP Expr ')' | '(' 'tl' SEP Expr ')' |
		//	'(' SYMBOL SEP Lexpr ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'nil' | VARIABLE | SYMBOL | '(' 'cons' Lexpr ')' | '(' 'list' Lexpr ')' | '(' 'hd' SEP Expr ')' | '(' 'tl' SEP Expr ')'
		//| '(' SYMBOL SEP Lexpr ')'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'nil'
		public Keyword getNilKeyword_0() { return cNilKeyword_0; }
		
		//VARIABLE
		public RuleCall getVARIABLETerminalRuleCall_1() { return cVARIABLETerminalRuleCall_1; }
		
		//SYMBOL
		public RuleCall getSYMBOLTerminalRuleCall_2() { return cSYMBOLTerminalRuleCall_2; }
		
		//'(' 'cons' Lexpr ')'
		public Group getGroup_3() { return cGroup_3; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_3_0() { return cLeftParenthesisKeyword_3_0; }
		
		//'cons'
		public Keyword getConsKeyword_3_1() { return cConsKeyword_3_1; }
		
		//Lexpr
		public RuleCall getLexprParserRuleCall_3_2() { return cLexprParserRuleCall_3_2; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3_3() { return cRightParenthesisKeyword_3_3; }
		
		//'(' 'list' Lexpr ')'
		public Group getGroup_4() { return cGroup_4; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_4_0() { return cLeftParenthesisKeyword_4_0; }
		
		//'list'
		public Keyword getListKeyword_4_1() { return cListKeyword_4_1; }
		
		//Lexpr
		public RuleCall getLexprParserRuleCall_4_2() { return cLexprParserRuleCall_4_2; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4_3() { return cRightParenthesisKeyword_4_3; }
		
		//'(' 'hd' SEP Expr ')'
		public Group getGroup_5() { return cGroup_5; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_5_0() { return cLeftParenthesisKeyword_5_0; }
		
		//'hd'
		public Keyword getHdKeyword_5_1() { return cHdKeyword_5_1; }
		
		//SEP
		public RuleCall getSEPTerminalRuleCall_5_2() { return cSEPTerminalRuleCall_5_2; }
		
		//Expr
		public RuleCall getExprParserRuleCall_5_3() { return cExprParserRuleCall_5_3; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5_4() { return cRightParenthesisKeyword_5_4; }
		
		//'(' 'tl' SEP Expr ')'
		public Group getGroup_6() { return cGroup_6; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_6_0() { return cLeftParenthesisKeyword_6_0; }
		
		//'tl'
		public Keyword getTlKeyword_6_1() { return cTlKeyword_6_1; }
		
		//SEP
		public RuleCall getSEPTerminalRuleCall_6_2() { return cSEPTerminalRuleCall_6_2; }
		
		//Expr
		public RuleCall getExprParserRuleCall_6_3() { return cExprParserRuleCall_6_3; }
		
		//')'
		public Keyword getRightParenthesisKeyword_6_4() { return cRightParenthesisKeyword_6_4; }
		
		//'(' SYMBOL SEP Lexpr ')'
		public Group getGroup_7() { return cGroup_7; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_7_0() { return cLeftParenthesisKeyword_7_0; }
		
		//SYMBOL
		public RuleCall getSYMBOLTerminalRuleCall_7_1() { return cSYMBOLTerminalRuleCall_7_1; }
		
		//SEP
		public RuleCall getSEPTerminalRuleCall_7_2() { return cSEPTerminalRuleCall_7_2; }
		
		//Lexpr
		public RuleCall getLexprParserRuleCall_7_3() { return cLexprParserRuleCall_7_3; }
		
		//')'
		public Keyword getRightParenthesisKeyword_7_4() { return cRightParenthesisKeyword_7_4; }
	}
	public class LexprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Compilation.Lexpr");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final RuleCall cSEPTerminalRuleCall_0_0 = (RuleCall)cGroup_0.eContents().get(0);
		private final RuleCall cExprParserRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final RuleCall cLexprParserRuleCall_0_2 = (RuleCall)cGroup_0.eContents().get(2);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final RuleCall cSEPTerminalRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final RuleCall cExprParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//Lexpr:
		//	=> SEP Expr Lexpr | SEP Expr;
		@Override public ParserRule getRule() { return rule; }
		
		//=> SEP Expr Lexpr | SEP Expr
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//=> SEP Expr Lexpr
		public Group getGroup_0() { return cGroup_0; }
		
		//=> SEP
		public RuleCall getSEPTerminalRuleCall_0_0() { return cSEPTerminalRuleCall_0_0; }
		
		//Expr
		public RuleCall getExprParserRuleCall_0_1() { return cExprParserRuleCall_0_1; }
		
		//Lexpr
		public RuleCall getLexprParserRuleCall_0_2() { return cLexprParserRuleCall_0_2; }
		
		//SEP Expr
		public Group getGroup_1() { return cGroup_1; }
		
		//SEP
		public RuleCall getSEPTerminalRuleCall_1_0() { return cSEPTerminalRuleCall_1_0; }
		
		//Expr
		public RuleCall getExprParserRuleCall_1_1() { return cExprParserRuleCall_1_1; }
	}
	public class VarsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Compilation.Vars");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final RuleCall cVARIABLETerminalRuleCall_0_0 = (RuleCall)cGroup_0.eContents().get(0);
		private final Keyword cCommaKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final RuleCall cVarsParserRuleCall_0_2 = (RuleCall)cGroup_0.eContents().get(2);
		private final RuleCall cVARIABLETerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Vars:
		//	VARIABLE ',' Vars | VARIABLE;
		@Override public ParserRule getRule() { return rule; }
		
		//VARIABLE ',' Vars | VARIABLE
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//VARIABLE ',' Vars
		public Group getGroup_0() { return cGroup_0; }
		
		//VARIABLE
		public RuleCall getVARIABLETerminalRuleCall_0_0() { return cVARIABLETerminalRuleCall_0_0; }
		
		//','
		public Keyword getCommaKeyword_0_1() { return cCommaKeyword_0_1; }
		
		//Vars
		public RuleCall getVarsParserRuleCall_0_2() { return cVarsParserRuleCall_0_2; }
		
		//VARIABLE
		public RuleCall getVARIABLETerminalRuleCall_1() { return cVARIABLETerminalRuleCall_1; }
	}
	
	
	private final ModelElements pModel;
	private final ProgramElements pProgram;
	private final FunctionElements pFunction;
	private final DefinitionElements pDefinition;
	private final InputElements pInput;
	private final OutputElements pOutput;
	private final CommandsElements pCommands;
	private final CommandElements pCommand;
	private final ExprElements pExpr;
	private final ExprAndElements pExprAnd;
	private final ExprOrElements pExprOr;
	private final ExprNotElements pExprNot;
	private final ExprEqElements pExprEq;
	private final ExprsElements pExprs;
	private final ExprSimpleElements pExprSimple;
	private final LexprElements pLexpr;
	private final VarsElements pVars;
	private final TerminalRule tVARIABLE;
	private final TerminalRule tSYMBOL;
	private final TerminalRule tSEP;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public CompilationGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pProgram = new ProgramElements();
		this.pFunction = new FunctionElements();
		this.pDefinition = new DefinitionElements();
		this.pInput = new InputElements();
		this.pOutput = new OutputElements();
		this.pCommands = new CommandsElements();
		this.pCommand = new CommandElements();
		this.pExpr = new ExprElements();
		this.pExprAnd = new ExprAndElements();
		this.pExprOr = new ExprOrElements();
		this.pExprNot = new ExprNotElements();
		this.pExprEq = new ExprEqElements();
		this.pExprs = new ExprsElements();
		this.pExprSimple = new ExprSimpleElements();
		this.pLexpr = new LexprElements();
		this.pVars = new VarsElements();
		this.tVARIABLE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Compilation.VARIABLE");
		this.tSYMBOL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Compilation.SYMBOL");
		this.tSEP = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Compilation.SEP");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.Compilation".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//	While+=Program;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	/// * --- Head of program --- * / Program:
	//	(Function SEP)*;
	public ProgramElements getProgramAccess() {
		return pProgram;
	}
	
	public ParserRule getProgramRule() {
		return getProgramAccess().getRule();
	}
	
	//Function:
	//	'function' SEP SYMBOL ':' SEP Definition;
	public FunctionElements getFunctionAccess() {
		return pFunction;
	}
	
	public ParserRule getFunctionRule() {
		return getFunctionAccess().getRule();
	}
	
	////Global form of a WHILE program	
	//Definition:
	//	'read' SEP Input '%' Commands '%' 'write' SEP Output;
	public DefinitionElements getDefinitionAccess() {
		return pDefinition;
	}
	
	public ParserRule getDefinitionRule() {
		return getDefinitionAccess().getRule();
	}
	
	//Input:
	//	VARIABLE ',' Input | VARIABLE;
	public InputElements getInputAccess() {
		return pInput;
	}
	
	public ParserRule getInputRule() {
		return getInputAccess().getRule();
	}
	
	//Output:
	//	VARIABLE ',' Output | VARIABLE;
	public OutputElements getOutputAccess() {
		return pOutput;
	}
	
	public ParserRule getOutputRule() {
		return getOutputAccess().getRule();
	}
	
	/// * --- Body of program --- * / Commands:
	//	=> (Command ';' SEP Commands) | Command;
	public CommandsElements getCommandsAccess() {
		return pCommands;
	}
	
	public ParserRule getCommandsRule() {
		return getCommandsAccess().getRule();
	}
	
	//Command:
	//	'nop' | Vars ':=' Exprs | 'while' SEP Expr SEP 'do' SEP Commands SEP 'od' | 'for' SEP Expr SEP 'do' SEP Commands SEP
	//	'od' | 'if' SEP Expr SEP 'then' SEP Commands SEP ('fi' | 'else' SEP Commands SEP 'fi') | 'foreach' SEP Expr SEP 'in'
	//	SEP Expr SEP 'do' SEP Commands SEP 'od';
	public CommandElements getCommandAccess() {
		return pCommand;
	}
	
	public ParserRule getCommandRule() {
		return getCommandAccess().getRule();
	}
	
	//Expr:
	//	=> ExprSimple | ExprAnd;
	public ExprElements getExprAccess() {
		return pExpr;
	}
	
	public ParserRule getExprRule() {
		return getExprAccess().getRule();
	}
	
	//// AND
	//ExprAnd:
	//	=> (ExprOr SEP '&&' SEP ExprAnd) | ExprOr;
	public ExprAndElements getExprAndAccess() {
		return pExprAnd;
	}
	
	public ParserRule getExprAndRule() {
		return getExprAndAccess().getRule();
	}
	
	//// OR
	//ExprOr:
	//	=> (ExprNot SEP '||' SEP ExprOr) | ExprNot;
	public ExprOrElements getExprOrAccess() {
		return pExprOr;
	}
	
	public ParserRule getExprOrRule() {
		return getExprOrAccess().getRule();
	}
	
	//// NOT
	//ExprNot:
	//	'!' SEP ExprEq | ExprEq;
	public ExprNotElements getExprNotAccess() {
		return pExprNot;
	}
	
	public ParserRule getExprNotRule() {
		return getExprNotAccess().getRule();
	}
	
	//// =?
	//ExprEq:
	//	ExprSimple '=?' ExprSimple | '(' Expr ')';
	public ExprEqElements getExprEqAccess() {
		return pExprEq;
	}
	
	public ParserRule getExprEqRule() {
		return getExprEqAccess().getRule();
	}
	
	//Exprs:
	//	=> (Expr ',' Exprs) | Expr;
	public ExprsElements getExprsAccess() {
		return pExprs;
	}
	
	public ParserRule getExprsRule() {
		return getExprsAccess().getRule();
	}
	
	//ExprSimple:
	//	'nil' | VARIABLE | SYMBOL |
	//	'(' 'cons' Lexpr ')' | '(' 'list' Lexpr ')' |
	//	'(' 'hd' SEP Expr ')' | '(' 'tl' SEP Expr ')' |
	//	'(' SYMBOL SEP Lexpr ')';
	public ExprSimpleElements getExprSimpleAccess() {
		return pExprSimple;
	}
	
	public ParserRule getExprSimpleRule() {
		return getExprSimpleAccess().getRule();
	}
	
	//Lexpr:
	//	=> SEP Expr Lexpr | SEP Expr;
	public LexprElements getLexprAccess() {
		return pLexpr;
	}
	
	public ParserRule getLexprRule() {
		return getLexprAccess().getRule();
	}
	
	//Vars:
	//	VARIABLE ',' Vars | VARIABLE;
	public VarsElements getVarsAccess() {
		return pVars;
	}
	
	public ParserRule getVarsRule() {
		return getVarsAccess().getRule();
	}
	
	//terminal VARIABLE:
	//	'A'..'Z' ('A'..'Z' | 'a'..'z' | '0'..'9')* ((('-' | '+' | '.' | '/' | '_' | '&') | "->") ('A'..'Z' | 'a'..'z' |
	//	'0'..'9')+)* ('!' | '?')?;
	public TerminalRule getVARIABLERule() {
		return tVARIABLE;
	}
	
	//terminal SYMBOL:
	//	'a'..'z' ('A'..'Z' | 'a'..'z' | '0'..'9')* ((('-' | '+' | '.' | '/' | '_' | '&') | "->") ('A'..'Z' | 'a'..'z' |
	//	'0'..'9')+)* ('!' | '?')?;
	public TerminalRule getSYMBOLRule() {
		return tSYMBOL;
	}
	
	//terminal SEP:
	//	' ' | '\r\n' | '	' | '\n';
	public TerminalRule getSEPRule() {
		return tSEP;
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' | "'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/ *'->'* /';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
