/*
 * generated by Xtext 2.10.0
 */
grammar InternalCompilation;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package org.xtext.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.xtext.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.xtext.services.CompilationGrammarAccess;

}

@parser::members {

 	private CompilationGrammarAccess grammarAccess;

    public InternalCompilationParser(TokenStream input, CompilationGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Model";
   	}

   	@Override
   	protected CompilationGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getModelRule()); }
	iv_ruleModel=ruleModel
	{ $current=$iv_ruleModel.current; }
	EOF;

// Rule Model
ruleModel returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getModelAccess().getWhileProgramParserRuleCall_0());
			}
			lv_While_0_0=ruleProgram
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getModelRule());
				}
				add(
					$current,
					"While",
					lv_While_0_0,
					"org.xtext.Compilation.Program");
				afterParserOrEnumRuleCall();
			}
		)
	)
;

// Entry rule entryRuleProgram
entryRuleProgram returns [String current=null]:
	{ newCompositeNode(grammarAccess.getProgramRule()); }
	iv_ruleProgram=ruleProgram
	{ $current=$iv_ruleProgram.current.getText(); }
	EOF;

// Rule Program
ruleProgram returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getProgramAccess().getFunctionParserRuleCall_0());
		}
		this_Function_0=ruleFunction
		{
			$current.merge(this_Function_0);
		}
		{
			afterParserOrEnumRuleCall();
		}
		this_SEP_1=RULE_SEP
		{
			$current.merge(this_SEP_1);
		}
		{
			newLeafNode(this_SEP_1, grammarAccess.getProgramAccess().getSEPTerminalRuleCall_1());
		}
	)*
;

// Entry rule entryRuleFunction
entryRuleFunction returns [String current=null]:
	{ newCompositeNode(grammarAccess.getFunctionRule()); }
	iv_ruleFunction=ruleFunction
	{ $current=$iv_ruleFunction.current.getText(); }
	EOF;

// Rule Function
ruleFunction returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='function'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getFunctionAccess().getFunctionKeyword_0());
		}
		this_SEP_1=RULE_SEP
		{
			$current.merge(this_SEP_1);
		}
		{
			newLeafNode(this_SEP_1, grammarAccess.getFunctionAccess().getSEPTerminalRuleCall_1());
		}
		this_SYMBOL_2=RULE_SYMBOL
		{
			$current.merge(this_SYMBOL_2);
		}
		{
			newLeafNode(this_SYMBOL_2, grammarAccess.getFunctionAccess().getSYMBOLTerminalRuleCall_2());
		}
		kw=':'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getFunctionAccess().getColonKeyword_3());
		}
		this_SEP_4=RULE_SEP
		{
			$current.merge(this_SEP_4);
		}
		{
			newLeafNode(this_SEP_4, grammarAccess.getFunctionAccess().getSEPTerminalRuleCall_4());
		}
		{
			newCompositeNode(grammarAccess.getFunctionAccess().getDefinitionParserRuleCall_5());
		}
		this_Definition_5=ruleDefinition
		{
			$current.merge(this_Definition_5);
		}
		{
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleDefinition
entryRuleDefinition returns [String current=null]:
	{ newCompositeNode(grammarAccess.getDefinitionRule()); }
	iv_ruleDefinition=ruleDefinition
	{ $current=$iv_ruleDefinition.current.getText(); }
	EOF;

// Rule Definition
ruleDefinition returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='read'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getDefinitionAccess().getReadKeyword_0());
		}
		this_SEP_1=RULE_SEP
		{
			$current.merge(this_SEP_1);
		}
		{
			newLeafNode(this_SEP_1, grammarAccess.getDefinitionAccess().getSEPTerminalRuleCall_1());
		}
		{
			newCompositeNode(grammarAccess.getDefinitionAccess().getInputParserRuleCall_2());
		}
		this_Input_2=ruleInput
		{
			$current.merge(this_Input_2);
		}
		{
			afterParserOrEnumRuleCall();
		}
		kw='%'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getDefinitionAccess().getPercentSignKeyword_3());
		}
		{
			newCompositeNode(grammarAccess.getDefinitionAccess().getCommandsParserRuleCall_4());
		}
		this_Commands_4=ruleCommands
		{
			$current.merge(this_Commands_4);
		}
		{
			afterParserOrEnumRuleCall();
		}
		kw='%'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getDefinitionAccess().getPercentSignKeyword_5());
		}
		kw='write'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getDefinitionAccess().getWriteKeyword_6());
		}
		this_SEP_7=RULE_SEP
		{
			$current.merge(this_SEP_7);
		}
		{
			newLeafNode(this_SEP_7, grammarAccess.getDefinitionAccess().getSEPTerminalRuleCall_7());
		}
		{
			newCompositeNode(grammarAccess.getDefinitionAccess().getOutputParserRuleCall_8());
		}
		this_Output_8=ruleOutput
		{
			$current.merge(this_Output_8);
		}
		{
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleInput
entryRuleInput returns [String current=null]:
	{ newCompositeNode(grammarAccess.getInputRule()); }
	iv_ruleInput=ruleInput
	{ $current=$iv_ruleInput.current.getText(); }
	EOF;

// Rule Input
ruleInput returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			this_VARIABLE_0=RULE_VARIABLE
			{
				$current.merge(this_VARIABLE_0);
			}
			{
				newLeafNode(this_VARIABLE_0, grammarAccess.getInputAccess().getVARIABLETerminalRuleCall_0_0());
			}
			kw=','
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getInputAccess().getCommaKeyword_0_1());
			}
			{
				newCompositeNode(grammarAccess.getInputAccess().getInputParserRuleCall_0_2());
			}
			this_Input_2=ruleInput
			{
				$current.merge(this_Input_2);
			}
			{
				afterParserOrEnumRuleCall();
			}
		)
		    |
		this_VARIABLE_3=RULE_VARIABLE
		{
			$current.merge(this_VARIABLE_3);
		}
		{
			newLeafNode(this_VARIABLE_3, grammarAccess.getInputAccess().getVARIABLETerminalRuleCall_1());
		}
	)
;

// Entry rule entryRuleOutput
entryRuleOutput returns [String current=null]:
	{ newCompositeNode(grammarAccess.getOutputRule()); }
	iv_ruleOutput=ruleOutput
	{ $current=$iv_ruleOutput.current.getText(); }
	EOF;

// Rule Output
ruleOutput returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			this_VARIABLE_0=RULE_VARIABLE
			{
				$current.merge(this_VARIABLE_0);
			}
			{
				newLeafNode(this_VARIABLE_0, grammarAccess.getOutputAccess().getVARIABLETerminalRuleCall_0_0());
			}
			kw=','
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getOutputAccess().getCommaKeyword_0_1());
			}
			{
				newCompositeNode(grammarAccess.getOutputAccess().getOutputParserRuleCall_0_2());
			}
			this_Output_2=ruleOutput
			{
				$current.merge(this_Output_2);
			}
			{
				afterParserOrEnumRuleCall();
			}
		)
		    |
		this_VARIABLE_3=RULE_VARIABLE
		{
			$current.merge(this_VARIABLE_3);
		}
		{
			newLeafNode(this_VARIABLE_3, grammarAccess.getOutputAccess().getVARIABLETerminalRuleCall_1());
		}
	)
;

// Entry rule entryRuleCommands
entryRuleCommands returns [String current=null]:
	{ newCompositeNode(grammarAccess.getCommandsRule()); }
	iv_ruleCommands=ruleCommands
	{ $current=$iv_ruleCommands.current.getText(); }
	EOF;

// Rule Commands
ruleCommands returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			((
				ruleCommand
				';'
				RULE_SEP
				ruleCommands
			)
			)=>
			(
				{
					newCompositeNode(grammarAccess.getCommandsAccess().getCommandParserRuleCall_0_0_0());
				}
				this_Command_0=ruleCommand
				{
					$current.merge(this_Command_0);
				}
				{
					afterParserOrEnumRuleCall();
				}
				kw=';'
				{
					$current.merge(kw);
					newLeafNode(kw, grammarAccess.getCommandsAccess().getSemicolonKeyword_0_0_1());
				}
				this_SEP_2=RULE_SEP
				{
					$current.merge(this_SEP_2);
				}
				{
					newLeafNode(this_SEP_2, grammarAccess.getCommandsAccess().getSEPTerminalRuleCall_0_0_2());
				}
				{
					newCompositeNode(grammarAccess.getCommandsAccess().getCommandsParserRuleCall_0_0_3());
				}
				this_Commands_3=ruleCommands
				{
					$current.merge(this_Commands_3);
				}
				{
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		{
			newCompositeNode(grammarAccess.getCommandsAccess().getCommandParserRuleCall_1());
		}
		this_Command_4=ruleCommand
		{
			$current.merge(this_Command_4);
		}
		{
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleCommand
entryRuleCommand returns [String current=null]:
	{ newCompositeNode(grammarAccess.getCommandRule()); }
	iv_ruleCommand=ruleCommand
	{ $current=$iv_ruleCommand.current.getText(); }
	EOF;

// Rule Command
ruleCommand returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='nop'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getCommandAccess().getNopKeyword_0());
		}
		    |
		(
			{
				newCompositeNode(grammarAccess.getCommandAccess().getVarsParserRuleCall_1_0());
			}
			this_Vars_1=ruleVars
			{
				$current.merge(this_Vars_1);
			}
			{
				afterParserOrEnumRuleCall();
			}
			kw=':='
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getCommandAccess().getColonEqualsSignKeyword_1_1());
			}
			{
				newCompositeNode(grammarAccess.getCommandAccess().getExprsParserRuleCall_1_2());
			}
			this_Exprs_3=ruleExprs
			{
				$current.merge(this_Exprs_3);
			}
			{
				afterParserOrEnumRuleCall();
			}
		)
		    |
		(
			kw='while'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getCommandAccess().getWhileKeyword_2_0());
			}
			this_SEP_5=RULE_SEP
			{
				$current.merge(this_SEP_5);
			}
			{
				newLeafNode(this_SEP_5, grammarAccess.getCommandAccess().getSEPTerminalRuleCall_2_1());
			}
			{
				newCompositeNode(grammarAccess.getCommandAccess().getExprParserRuleCall_2_2());
			}
			this_Expr_6=ruleExpr
			{
				$current.merge(this_Expr_6);
			}
			{
				afterParserOrEnumRuleCall();
			}
			this_SEP_7=RULE_SEP
			{
				$current.merge(this_SEP_7);
			}
			{
				newLeafNode(this_SEP_7, grammarAccess.getCommandAccess().getSEPTerminalRuleCall_2_3());
			}
			kw='do'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getCommandAccess().getDoKeyword_2_4());
			}
			this_SEP_9=RULE_SEP
			{
				$current.merge(this_SEP_9);
			}
			{
				newLeafNode(this_SEP_9, grammarAccess.getCommandAccess().getSEPTerminalRuleCall_2_5());
			}
			{
				newCompositeNode(grammarAccess.getCommandAccess().getCommandsParserRuleCall_2_6());
			}
			this_Commands_10=ruleCommands
			{
				$current.merge(this_Commands_10);
			}
			{
				afterParserOrEnumRuleCall();
			}
			this_SEP_11=RULE_SEP
			{
				$current.merge(this_SEP_11);
			}
			{
				newLeafNode(this_SEP_11, grammarAccess.getCommandAccess().getSEPTerminalRuleCall_2_7());
			}
			kw='od'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getCommandAccess().getOdKeyword_2_8());
			}
		)
		    |
		(
			kw='for'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getCommandAccess().getForKeyword_3_0());
			}
			this_SEP_14=RULE_SEP
			{
				$current.merge(this_SEP_14);
			}
			{
				newLeafNode(this_SEP_14, grammarAccess.getCommandAccess().getSEPTerminalRuleCall_3_1());
			}
			{
				newCompositeNode(grammarAccess.getCommandAccess().getExprParserRuleCall_3_2());
			}
			this_Expr_15=ruleExpr
			{
				$current.merge(this_Expr_15);
			}
			{
				afterParserOrEnumRuleCall();
			}
			this_SEP_16=RULE_SEP
			{
				$current.merge(this_SEP_16);
			}
			{
				newLeafNode(this_SEP_16, grammarAccess.getCommandAccess().getSEPTerminalRuleCall_3_3());
			}
			kw='do'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getCommandAccess().getDoKeyword_3_4());
			}
			this_SEP_18=RULE_SEP
			{
				$current.merge(this_SEP_18);
			}
			{
				newLeafNode(this_SEP_18, grammarAccess.getCommandAccess().getSEPTerminalRuleCall_3_5());
			}
			{
				newCompositeNode(grammarAccess.getCommandAccess().getCommandsParserRuleCall_3_6());
			}
			this_Commands_19=ruleCommands
			{
				$current.merge(this_Commands_19);
			}
			{
				afterParserOrEnumRuleCall();
			}
			this_SEP_20=RULE_SEP
			{
				$current.merge(this_SEP_20);
			}
			{
				newLeafNode(this_SEP_20, grammarAccess.getCommandAccess().getSEPTerminalRuleCall_3_7());
			}
			kw='od'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getCommandAccess().getOdKeyword_3_8());
			}
		)
		    |
		(
			kw='if'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getCommandAccess().getIfKeyword_4_0());
			}
			this_SEP_23=RULE_SEP
			{
				$current.merge(this_SEP_23);
			}
			{
				newLeafNode(this_SEP_23, grammarAccess.getCommandAccess().getSEPTerminalRuleCall_4_1());
			}
			{
				newCompositeNode(grammarAccess.getCommandAccess().getExprParserRuleCall_4_2());
			}
			this_Expr_24=ruleExpr
			{
				$current.merge(this_Expr_24);
			}
			{
				afterParserOrEnumRuleCall();
			}
			this_SEP_25=RULE_SEP
			{
				$current.merge(this_SEP_25);
			}
			{
				newLeafNode(this_SEP_25, grammarAccess.getCommandAccess().getSEPTerminalRuleCall_4_3());
			}
			kw='then'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getCommandAccess().getThenKeyword_4_4());
			}
			this_SEP_27=RULE_SEP
			{
				$current.merge(this_SEP_27);
			}
			{
				newLeafNode(this_SEP_27, grammarAccess.getCommandAccess().getSEPTerminalRuleCall_4_5());
			}
			{
				newCompositeNode(grammarAccess.getCommandAccess().getCommandsParserRuleCall_4_6());
			}
			this_Commands_28=ruleCommands
			{
				$current.merge(this_Commands_28);
			}
			{
				afterParserOrEnumRuleCall();
			}
			this_SEP_29=RULE_SEP
			{
				$current.merge(this_SEP_29);
			}
			{
				newLeafNode(this_SEP_29, grammarAccess.getCommandAccess().getSEPTerminalRuleCall_4_7());
			}
			(
				kw='fi'
				{
					$current.merge(kw);
					newLeafNode(kw, grammarAccess.getCommandAccess().getFiKeyword_4_8_0());
				}
				    |
				(
					kw='else'
					{
						$current.merge(kw);
						newLeafNode(kw, grammarAccess.getCommandAccess().getElseKeyword_4_8_1_0());
					}
					this_SEP_32=RULE_SEP
					{
						$current.merge(this_SEP_32);
					}
					{
						newLeafNode(this_SEP_32, grammarAccess.getCommandAccess().getSEPTerminalRuleCall_4_8_1_1());
					}
					{
						newCompositeNode(grammarAccess.getCommandAccess().getCommandsParserRuleCall_4_8_1_2());
					}
					this_Commands_33=ruleCommands
					{
						$current.merge(this_Commands_33);
					}
					{
						afterParserOrEnumRuleCall();
					}
					this_SEP_34=RULE_SEP
					{
						$current.merge(this_SEP_34);
					}
					{
						newLeafNode(this_SEP_34, grammarAccess.getCommandAccess().getSEPTerminalRuleCall_4_8_1_3());
					}
					kw='fi'
					{
						$current.merge(kw);
						newLeafNode(kw, grammarAccess.getCommandAccess().getFiKeyword_4_8_1_4());
					}
				)
			)
		)
		    |
		(
			kw='foreach'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getCommandAccess().getForeachKeyword_5_0());
			}
			this_SEP_37=RULE_SEP
			{
				$current.merge(this_SEP_37);
			}
			{
				newLeafNode(this_SEP_37, grammarAccess.getCommandAccess().getSEPTerminalRuleCall_5_1());
			}
			{
				newCompositeNode(grammarAccess.getCommandAccess().getExprParserRuleCall_5_2());
			}
			this_Expr_38=ruleExpr
			{
				$current.merge(this_Expr_38);
			}
			{
				afterParserOrEnumRuleCall();
			}
			this_SEP_39=RULE_SEP
			{
				$current.merge(this_SEP_39);
			}
			{
				newLeafNode(this_SEP_39, grammarAccess.getCommandAccess().getSEPTerminalRuleCall_5_3());
			}
			kw='in'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getCommandAccess().getInKeyword_5_4());
			}
			this_SEP_41=RULE_SEP
			{
				$current.merge(this_SEP_41);
			}
			{
				newLeafNode(this_SEP_41, grammarAccess.getCommandAccess().getSEPTerminalRuleCall_5_5());
			}
			{
				newCompositeNode(grammarAccess.getCommandAccess().getExprParserRuleCall_5_6());
			}
			this_Expr_42=ruleExpr
			{
				$current.merge(this_Expr_42);
			}
			{
				afterParserOrEnumRuleCall();
			}
			this_SEP_43=RULE_SEP
			{
				$current.merge(this_SEP_43);
			}
			{
				newLeafNode(this_SEP_43, grammarAccess.getCommandAccess().getSEPTerminalRuleCall_5_7());
			}
			kw='do'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getCommandAccess().getDoKeyword_5_8());
			}
			this_SEP_45=RULE_SEP
			{
				$current.merge(this_SEP_45);
			}
			{
				newLeafNode(this_SEP_45, grammarAccess.getCommandAccess().getSEPTerminalRuleCall_5_9());
			}
			{
				newCompositeNode(grammarAccess.getCommandAccess().getCommandsParserRuleCall_5_10());
			}
			this_Commands_46=ruleCommands
			{
				$current.merge(this_Commands_46);
			}
			{
				afterParserOrEnumRuleCall();
			}
			this_SEP_47=RULE_SEP
			{
				$current.merge(this_SEP_47);
			}
			{
				newLeafNode(this_SEP_47, grammarAccess.getCommandAccess().getSEPTerminalRuleCall_5_11());
			}
			kw='od'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getCommandAccess().getOdKeyword_5_12());
			}
		)
	)
;

// Entry rule entryRuleExpr
entryRuleExpr returns [String current=null]:
	{ newCompositeNode(grammarAccess.getExprRule()); }
	iv_ruleExpr=ruleExpr
	{ $current=$iv_ruleExpr.current.getText(); }
	EOF;

// Rule Expr
ruleExpr returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(ruleExprSimple)=>
			{
				newCompositeNode(grammarAccess.getExprAccess().getExprSimpleParserRuleCall_0());
			}
			this_ExprSimple_0=ruleExprSimple
			{
				$current.merge(this_ExprSimple_0);
			}
			{
				afterParserOrEnumRuleCall();
			}
		)
		    |
		{
			newCompositeNode(grammarAccess.getExprAccess().getExprAndParserRuleCall_1());
		}
		this_ExprAnd_1=ruleExprAnd
		{
			$current.merge(this_ExprAnd_1);
		}
		{
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleExprAnd
entryRuleExprAnd returns [String current=null]:
	{ newCompositeNode(grammarAccess.getExprAndRule()); }
	iv_ruleExprAnd=ruleExprAnd
	{ $current=$iv_ruleExprAnd.current.getText(); }
	EOF;

// Rule ExprAnd
ruleExprAnd returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			((
				ruleExprOr
				RULE_SEP
				'&&'
				RULE_SEP
				ruleExprAnd
			)
			)=>
			(
				{
					newCompositeNode(grammarAccess.getExprAndAccess().getExprOrParserRuleCall_0_0_0());
				}
				this_ExprOr_0=ruleExprOr
				{
					$current.merge(this_ExprOr_0);
				}
				{
					afterParserOrEnumRuleCall();
				}
				this_SEP_1=RULE_SEP
				{
					$current.merge(this_SEP_1);
				}
				{
					newLeafNode(this_SEP_1, grammarAccess.getExprAndAccess().getSEPTerminalRuleCall_0_0_1());
				}
				kw='&&'
				{
					$current.merge(kw);
					newLeafNode(kw, grammarAccess.getExprAndAccess().getAmpersandAmpersandKeyword_0_0_2());
				}
				this_SEP_3=RULE_SEP
				{
					$current.merge(this_SEP_3);
				}
				{
					newLeafNode(this_SEP_3, grammarAccess.getExprAndAccess().getSEPTerminalRuleCall_0_0_3());
				}
				{
					newCompositeNode(grammarAccess.getExprAndAccess().getExprAndParserRuleCall_0_0_4());
				}
				this_ExprAnd_4=ruleExprAnd
				{
					$current.merge(this_ExprAnd_4);
				}
				{
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		{
			newCompositeNode(grammarAccess.getExprAndAccess().getExprOrParserRuleCall_1());
		}
		this_ExprOr_5=ruleExprOr
		{
			$current.merge(this_ExprOr_5);
		}
		{
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleExprOr
entryRuleExprOr returns [String current=null]:
	{ newCompositeNode(grammarAccess.getExprOrRule()); }
	iv_ruleExprOr=ruleExprOr
	{ $current=$iv_ruleExprOr.current.getText(); }
	EOF;

// Rule ExprOr
ruleExprOr returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			((
				ruleExprNot
				RULE_SEP
				'||'
				RULE_SEP
				ruleExprOr
			)
			)=>
			(
				{
					newCompositeNode(grammarAccess.getExprOrAccess().getExprNotParserRuleCall_0_0_0());
				}
				this_ExprNot_0=ruleExprNot
				{
					$current.merge(this_ExprNot_0);
				}
				{
					afterParserOrEnumRuleCall();
				}
				this_SEP_1=RULE_SEP
				{
					$current.merge(this_SEP_1);
				}
				{
					newLeafNode(this_SEP_1, grammarAccess.getExprOrAccess().getSEPTerminalRuleCall_0_0_1());
				}
				kw='||'
				{
					$current.merge(kw);
					newLeafNode(kw, grammarAccess.getExprOrAccess().getVerticalLineVerticalLineKeyword_0_0_2());
				}
				this_SEP_3=RULE_SEP
				{
					$current.merge(this_SEP_3);
				}
				{
					newLeafNode(this_SEP_3, grammarAccess.getExprOrAccess().getSEPTerminalRuleCall_0_0_3());
				}
				{
					newCompositeNode(grammarAccess.getExprOrAccess().getExprOrParserRuleCall_0_0_4());
				}
				this_ExprOr_4=ruleExprOr
				{
					$current.merge(this_ExprOr_4);
				}
				{
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		{
			newCompositeNode(grammarAccess.getExprOrAccess().getExprNotParserRuleCall_1());
		}
		this_ExprNot_5=ruleExprNot
		{
			$current.merge(this_ExprNot_5);
		}
		{
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleExprNot
entryRuleExprNot returns [String current=null]:
	{ newCompositeNode(grammarAccess.getExprNotRule()); }
	iv_ruleExprNot=ruleExprNot
	{ $current=$iv_ruleExprNot.current.getText(); }
	EOF;

// Rule ExprNot
ruleExprNot returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			kw='!'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getExprNotAccess().getExclamationMarkKeyword_0_0());
			}
			this_SEP_1=RULE_SEP
			{
				$current.merge(this_SEP_1);
			}
			{
				newLeafNode(this_SEP_1, grammarAccess.getExprNotAccess().getSEPTerminalRuleCall_0_1());
			}
			{
				newCompositeNode(grammarAccess.getExprNotAccess().getExprEqParserRuleCall_0_2());
			}
			this_ExprEq_2=ruleExprEq
			{
				$current.merge(this_ExprEq_2);
			}
			{
				afterParserOrEnumRuleCall();
			}
		)
		    |
		{
			newCompositeNode(grammarAccess.getExprNotAccess().getExprEqParserRuleCall_1());
		}
		this_ExprEq_3=ruleExprEq
		{
			$current.merge(this_ExprEq_3);
		}
		{
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleExprEq
entryRuleExprEq returns [String current=null]:
	{ newCompositeNode(grammarAccess.getExprEqRule()); }
	iv_ruleExprEq=ruleExprEq
	{ $current=$iv_ruleExprEq.current.getText(); }
	EOF;

// Rule ExprEq
ruleExprEq returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getExprEqAccess().getExprSimpleParserRuleCall_0_0());
			}
			this_ExprSimple_0=ruleExprSimple
			{
				$current.merge(this_ExprSimple_0);
			}
			{
				afterParserOrEnumRuleCall();
			}
			kw='=?'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getExprEqAccess().getEqualsSignQuestionMarkKeyword_0_1());
			}
			{
				newCompositeNode(grammarAccess.getExprEqAccess().getExprSimpleParserRuleCall_0_2());
			}
			this_ExprSimple_2=ruleExprSimple
			{
				$current.merge(this_ExprSimple_2);
			}
			{
				afterParserOrEnumRuleCall();
			}
		)
		    |
		(
			kw='('
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getExprEqAccess().getLeftParenthesisKeyword_1_0());
			}
			{
				newCompositeNode(grammarAccess.getExprEqAccess().getExprParserRuleCall_1_1());
			}
			this_Expr_4=ruleExpr
			{
				$current.merge(this_Expr_4);
			}
			{
				afterParserOrEnumRuleCall();
			}
			kw=')'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getExprEqAccess().getRightParenthesisKeyword_1_2());
			}
		)
	)
;

// Entry rule entryRuleExprs
entryRuleExprs returns [String current=null]:
	{ newCompositeNode(grammarAccess.getExprsRule()); }
	iv_ruleExprs=ruleExprs
	{ $current=$iv_ruleExprs.current.getText(); }
	EOF;

// Rule Exprs
ruleExprs returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			((
				ruleExpr
				','
				ruleExprs
			)
			)=>
			(
				{
					newCompositeNode(grammarAccess.getExprsAccess().getExprParserRuleCall_0_0_0());
				}
				this_Expr_0=ruleExpr
				{
					$current.merge(this_Expr_0);
				}
				{
					afterParserOrEnumRuleCall();
				}
				kw=','
				{
					$current.merge(kw);
					newLeafNode(kw, grammarAccess.getExprsAccess().getCommaKeyword_0_0_1());
				}
				{
					newCompositeNode(grammarAccess.getExprsAccess().getExprsParserRuleCall_0_0_2());
				}
				this_Exprs_2=ruleExprs
				{
					$current.merge(this_Exprs_2);
				}
				{
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		{
			newCompositeNode(grammarAccess.getExprsAccess().getExprParserRuleCall_1());
		}
		this_Expr_3=ruleExpr
		{
			$current.merge(this_Expr_3);
		}
		{
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleExprSimple
entryRuleExprSimple returns [String current=null]:
	{ newCompositeNode(grammarAccess.getExprSimpleRule()); }
	iv_ruleExprSimple=ruleExprSimple
	{ $current=$iv_ruleExprSimple.current.getText(); }
	EOF;

// Rule ExprSimple
ruleExprSimple returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='nil'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getExprSimpleAccess().getNilKeyword_0());
		}
		    |
		this_VARIABLE_1=RULE_VARIABLE
		{
			$current.merge(this_VARIABLE_1);
		}
		{
			newLeafNode(this_VARIABLE_1, grammarAccess.getExprSimpleAccess().getVARIABLETerminalRuleCall_1());
		}
		    |
		this_SYMBOL_2=RULE_SYMBOL
		{
			$current.merge(this_SYMBOL_2);
		}
		{
			newLeafNode(this_SYMBOL_2, grammarAccess.getExprSimpleAccess().getSYMBOLTerminalRuleCall_2());
		}
		    |
		(
			kw='('
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getExprSimpleAccess().getLeftParenthesisKeyword_3_0());
			}
			kw='cons'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getExprSimpleAccess().getConsKeyword_3_1());
			}
			{
				newCompositeNode(grammarAccess.getExprSimpleAccess().getLexprParserRuleCall_3_2());
			}
			this_Lexpr_5=ruleLexpr
			{
				$current.merge(this_Lexpr_5);
			}
			{
				afterParserOrEnumRuleCall();
			}
			kw=')'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getExprSimpleAccess().getRightParenthesisKeyword_3_3());
			}
		)
		    |
		(
			kw='('
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getExprSimpleAccess().getLeftParenthesisKeyword_4_0());
			}
			kw='list'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getExprSimpleAccess().getListKeyword_4_1());
			}
			{
				newCompositeNode(grammarAccess.getExprSimpleAccess().getLexprParserRuleCall_4_2());
			}
			this_Lexpr_9=ruleLexpr
			{
				$current.merge(this_Lexpr_9);
			}
			{
				afterParserOrEnumRuleCall();
			}
			kw=')'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getExprSimpleAccess().getRightParenthesisKeyword_4_3());
			}
		)
		    |
		(
			kw='('
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getExprSimpleAccess().getLeftParenthesisKeyword_5_0());
			}
			kw='hd'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getExprSimpleAccess().getHdKeyword_5_1());
			}
			this_SEP_13=RULE_SEP
			{
				$current.merge(this_SEP_13);
			}
			{
				newLeafNode(this_SEP_13, grammarAccess.getExprSimpleAccess().getSEPTerminalRuleCall_5_2());
			}
			{
				newCompositeNode(grammarAccess.getExprSimpleAccess().getExprParserRuleCall_5_3());
			}
			this_Expr_14=ruleExpr
			{
				$current.merge(this_Expr_14);
			}
			{
				afterParserOrEnumRuleCall();
			}
			kw=')'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getExprSimpleAccess().getRightParenthesisKeyword_5_4());
			}
		)
		    |
		(
			kw='('
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getExprSimpleAccess().getLeftParenthesisKeyword_6_0());
			}
			kw='tl'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getExprSimpleAccess().getTlKeyword_6_1());
			}
			this_SEP_18=RULE_SEP
			{
				$current.merge(this_SEP_18);
			}
			{
				newLeafNode(this_SEP_18, grammarAccess.getExprSimpleAccess().getSEPTerminalRuleCall_6_2());
			}
			{
				newCompositeNode(grammarAccess.getExprSimpleAccess().getExprParserRuleCall_6_3());
			}
			this_Expr_19=ruleExpr
			{
				$current.merge(this_Expr_19);
			}
			{
				afterParserOrEnumRuleCall();
			}
			kw=')'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getExprSimpleAccess().getRightParenthesisKeyword_6_4());
			}
		)
		    |
		(
			kw='('
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getExprSimpleAccess().getLeftParenthesisKeyword_7_0());
			}
			this_SYMBOL_22=RULE_SYMBOL
			{
				$current.merge(this_SYMBOL_22);
			}
			{
				newLeafNode(this_SYMBOL_22, grammarAccess.getExprSimpleAccess().getSYMBOLTerminalRuleCall_7_1());
			}
			this_SEP_23=RULE_SEP
			{
				$current.merge(this_SEP_23);
			}
			{
				newLeafNode(this_SEP_23, grammarAccess.getExprSimpleAccess().getSEPTerminalRuleCall_7_2());
			}
			{
				newCompositeNode(grammarAccess.getExprSimpleAccess().getLexprParserRuleCall_7_3());
			}
			this_Lexpr_24=ruleLexpr
			{
				$current.merge(this_Lexpr_24);
			}
			{
				afterParserOrEnumRuleCall();
			}
			kw=')'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getExprSimpleAccess().getRightParenthesisKeyword_7_4());
			}
		)
	)
;

// Entry rule entryRuleLexpr
entryRuleLexpr returns [String current=null]:
	{ newCompositeNode(grammarAccess.getLexprRule()); }
	iv_ruleLexpr=ruleLexpr
	{ $current=$iv_ruleLexpr.current.getText(); }
	EOF;

// Rule Lexpr
ruleLexpr returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				(RULE_SEP)=>
				this_SEP_0=RULE_SEP
				{
					$current.merge(this_SEP_0);
				}
				{
					newLeafNode(this_SEP_0, grammarAccess.getLexprAccess().getSEPTerminalRuleCall_0_0());
				}
			)
			{
				newCompositeNode(grammarAccess.getLexprAccess().getExprParserRuleCall_0_1());
			}
			this_Expr_1=ruleExpr
			{
				$current.merge(this_Expr_1);
			}
			{
				afterParserOrEnumRuleCall();
			}
			{
				newCompositeNode(grammarAccess.getLexprAccess().getLexprParserRuleCall_0_2());
			}
			this_Lexpr_2=ruleLexpr
			{
				$current.merge(this_Lexpr_2);
			}
			{
				afterParserOrEnumRuleCall();
			}
		)
		    |
		(
			this_SEP_3=RULE_SEP
			{
				$current.merge(this_SEP_3);
			}
			{
				newLeafNode(this_SEP_3, grammarAccess.getLexprAccess().getSEPTerminalRuleCall_1_0());
			}
			{
				newCompositeNode(grammarAccess.getLexprAccess().getExprParserRuleCall_1_1());
			}
			this_Expr_4=ruleExpr
			{
				$current.merge(this_Expr_4);
			}
			{
				afterParserOrEnumRuleCall();
			}
		)
	)
;

// Entry rule entryRuleVars
entryRuleVars returns [String current=null]:
	{ newCompositeNode(grammarAccess.getVarsRule()); }
	iv_ruleVars=ruleVars
	{ $current=$iv_ruleVars.current.getText(); }
	EOF;

// Rule Vars
ruleVars returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			this_VARIABLE_0=RULE_VARIABLE
			{
				$current.merge(this_VARIABLE_0);
			}
			{
				newLeafNode(this_VARIABLE_0, grammarAccess.getVarsAccess().getVARIABLETerminalRuleCall_0_0());
			}
			kw=','
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getVarsAccess().getCommaKeyword_0_1());
			}
			{
				newCompositeNode(grammarAccess.getVarsAccess().getVarsParserRuleCall_0_2());
			}
			this_Vars_2=ruleVars
			{
				$current.merge(this_Vars_2);
			}
			{
				afterParserOrEnumRuleCall();
			}
		)
		    |
		this_VARIABLE_3=RULE_VARIABLE
		{
			$current.merge(this_VARIABLE_3);
		}
		{
			newLeafNode(this_VARIABLE_3, grammarAccess.getVarsAccess().getVARIABLETerminalRuleCall_1());
		}
	)
;

RULE_VARIABLE : 'A'..'Z' ('A'..'Z'|'a'..'z'|'0'..'9')* ((('-'|'+'|'.'|'/'|'_'|'&')|'->') ('A'..'Z'|'a'..'z'|'0'..'9')+)* ('!'|'?')?;

RULE_SYMBOL : 'a'..'z' ('A'..'Z'|'a'..'z'|'0'..'9')* ((('-'|'+'|'.'|'/'|'_'|'&')|'->') ('A'..'Z'|'a'..'z'|'0'..'9')+)* ('!'|'?')?;

RULE_SEP : (' '|'\r\n'|'\t'|'\n');

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
